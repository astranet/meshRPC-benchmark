// Code generated by meshRPC. DO NOT EDIT.
// All changes must be done in custom client that should either embed or wrap this.

package peer

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/pkg/errors"
)

type ServiceClient interface {
	Service
}

type ServiceClientOptions struct {
}

func checkServiceClientOptions(opt *ServiceClientOptions) *ServiceClientOptions {
	if opt == nil {
		opt = &ServiceClientOptions{}
	}
	return opt
}

type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

func NewServiceClient(
	httpClient HTTPClient,
	opt *ServiceClientOptions,
) ServiceClient {
	return &rpcClient{
		opt:        checkServiceClientOptions(opt),
		httpClient: httpClient,
	}
}

type rpcClient struct {
	opt        *ServiceClientOptions
	httpClient HTTPClient
}

func (_client *rpcClient) Hop(hop *HopState) (_ret0 *HopState, _err error) {
	// TODO: Report Stats + Timing

	_req := &HopRequest{
		Hop: hop,
	}
	var _resp *HopResponse
	var _respBody []byte
	_respBody, _err = _client.do(_client.newJsonReq("POST", "Hop", _req))
	if _err != nil {
		return
	} else if _err = _client.checkJsonRespErr(_respBody); _err != nil {
		return
	} else if json.Unmarshal(_respBody, &_resp); _err != nil {
		return
	}
	_ret0 = _resp.Ret0
	return
}

func (_client *rpcClient) do(req *http.Request) ([]byte, error) {
	resp, err := _client.httpClient.Do(req)
	if err != nil {
		err = errors.Errorf("rpcClient: %v", err)
		return nil, err
	}
	respBody, _ := ioutil.ReadAll(resp.Body)
	_ = resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		if len(respBody) > 0 {
			err := errors.Errorf("service error %d: %s", resp.StatusCode, string(respBody))
			return nil, err
		}
		err := errors.Errorf("service error %d: %s", resp.StatusCode, resp.Status)
		return nil, err
	}
	return respBody, nil
}

func (_client *rpcClient) newJsonReq(method string, fnName string, v interface{}) *http.Request {
	data, _ := json.Marshal(v)
	req, _ := http.NewRequest(method, fnName, bytes.NewReader(data))
	return req
}

func (_client *rpcClient) checkJsonRespErr(resp []byte) error {
	var e ErrorResponse
	_ = json.Unmarshal(resp, &e)
	if len(e.Error) == 0 {
		return nil
	}
	return errors.New(e.Error)
}
