// Code generated by meshRPC. DO NOT EDIT.
// All changes must be done in custom client that should either embed or wrap this.

package peer

import (
	"bytes"
	"encoding/json"
	"io"

	"github.com/gin-gonic/gin"
)

type RPCHandler interface {
	Hop(ctx *gin.Context)
}

var RPCHandlerSpec RPCHandler = &rpcHandler{}

type RPCHandlerOptions struct {
}

func checkRPCHandlerOptions(opt *RPCHandlerOptions) *RPCHandlerOptions {
	if opt == nil {
		opt = &RPCHandlerOptions{}
	}
	return opt
}

func NewRPCHandler(
	svc Service,
	opt *RPCHandlerOptions,
) RPCHandler {
	return &rpcHandler{
		opt: checkRPCHandlerOptions(opt),
		svc: svc,
	}
}

type rpcHandler struct {
	svc Service
	opt *RPCHandlerOptions
}

type HopRequest struct {
	Hop *HopState `json:"hop,omitempty"`
}

type HopResponse struct {
	ErrorResponse
	Ret0 *HopState `json:"_ret0,omitempty"`
}

func (_handler *rpcHandler) Hop(_ctx *gin.Context) {
	// TODO: Report Stats + Timing

	var _req HopRequest
	_decoder := json.NewDecoder(_ctx.Request.Body)
	defer _ctx.Request.Body.Close()
	_err := _decoder.Decode(&_req)
	if _err != nil {
		// TODO: Report Error

		_data, _ := json.Marshal(&HopResponse{
			ErrorResponse: ErrorResponse{
				Error: _err.Error(),
			},
		})
		_ctx.Status(400)
		// TODO: Report Stats
		_, _ = io.Copy(_ctx.Writer, bytes.NewReader(_data))
		return
	}
	var _resp HopResponse
	_resp.Ret0, _err = _handler.svc.Hop(_req.Hop)
	if _err != nil {
		// TODO: Report Error

		_data, _ := json.Marshal(&HopResponse{
			ErrorResponse: ErrorResponse{
				Error: _err.Error(),
			},
		})
		_ctx.Status(400)
		// TODO: Report Stats
		_, _ = io.Copy(_ctx.Writer, bytes.NewReader(_data))
		return
	}

	_data, _ := json.Marshal(&_resp)
	_ctx.Status(200)
	// TODO: Report Stats
	_, _ = io.Copy(_ctx.Writer, bytes.NewReader(_data))
	return
}

var rpcHandlerMethodsMap = map[string][]string{
	"*": []string{
		"POST",
	},
}

func (_ *rpcHandler) HTTPMethodsMap() map[string][]string {
	return rpcHandlerMethodsMap
}

type ErrorResponse struct {
	Error string `json:"error"`
}
